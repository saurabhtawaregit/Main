trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - '*'

variables:
  - group: sf-credentials git

jobs:
  - job: ValidateAndDeploy
    displayName: Validate and Deploy changes
    condition: or(eq(variables['Build.Reason'], 'PullRequest'), and(succeeded(), eq(variables['Build.SourceBranchName'], 'main')))
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - checkout: self
        fetchDepth: 0

      - task: UseNode@1
        inputs:
          version: 17.x

      - script: |
          npm install --global @salesforce/cli
        displayName: Install Salesforce CLI (new)

      - task: DownloadSecureFile@1
        name: opensslCertificate
        displayName: Download OpenSSL Certificate
        inputs:
          secureFile: server.key

      - bash: |
          sf org login jwt --username $(userName) --jwt-key-file $(opensslCertificate.secureFilePath) --client-id $(clientId) --instance-url $(instanceUrl)
        displayName: Authorize Salesforce Org

      - bash: |
          echo y | sf plugins:install sfdx-git-delta
        displayName: Installing sfdx-git-delta plugin

      - bash: |
          sf sgd:source:delta -f HEAD^ --output . --ignore .gitignore
        displayName: Checking for delta changes

      - bash: |
          cat package/package.xml
        displayName: Showing the generated delta of package.xml

      - bash: |
          cat destructiveChanges/destructiveChanges.xml
        displayName: Showing the destructiveChanges.xml

      - bash: |
          TEST_CLASSES=$(tr '\n' ' ' < test-classes.txt)
          sf project deploy start --ignore-warnings --manifest package/package.xml --dry-run --test-level RunSpecifiedTests --tests $TEST_CLASSES --target-org $(userName) --post-destructive-changes destructiveChanges/destructiveChanges.xml --wait 40
        displayName: Running validation on source code

      - bash: |
          if [[ "$(Build.SourceBranchName)" == "main" ]]; then
            TEST_CLASSES=$(tr '\n' ' ' < test-classes.txt)
            sf project deploy start --ignore-warnings --manifest package/package.xml --test-level RunSpecifiedTests --tests $TEST_CLASSES --target-org $(userName) --post-destructive-changes destructiveChanges/destructiveChanges.xml --wait 40
          fi
        displayName: Deploying source code to target org
